%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.7.4 (Build 20G1120) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.1437 42 l
124.1517 42 130.64371 35.508125 130.64371 27.500025 c
130.64371 1.326025 l
15.5 1.326025 l
7.4918718 1.326025 1 7.817925 1 15.826025 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
131.64371 43 l
131.64371 0.32602501 l
0 0.32602501 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.1437 0 l
123.1517 0 129.64371 6.4918752 129.64371 14.499975 c
129.64371 40.673977 l
14.5 40.673977 l
6.4918718 40.673977 0 34.182076 0 26.173975 c
0 0 l
h
S
Q
q
52.908302 21.275826 m
52.908302 19.112925 l
58.259602 19.112925 l
58.259602 21.275826 l
52.908302 21.275826 l
h
52.908302 13.777625 m
52.908302 11.614625 l
58.548 11.614625 l
58.548 13.777625 l
52.908302 13.777625 l
h
52.7481 17.510725 m
52.7481 15.411825 l
57.875103 15.411825 l
57.875103 17.510725 l
52.7481 17.510725 l
h
43.968102 21.275826 m
43.968102 19.112925 l
48.886803 19.112925 l
48.886803 21.275826 l
43.968102 21.275826 l
h
44.128304 17.510725 m
44.128304 15.411825 l
48.758602 15.411825 l
48.758602 17.510725 l
44.128304 17.510725 l
h
51.722603 23.166426 m
51.722603 8.0257254 l
54.061802 8.0257254 l
54.061802 23.166426 l
51.722603 23.166426 l
h
43.279102 13.761625 m
43.695702 11.438425 l
45.313904 11.694725 47.3647 12.015225 49.2873 12.335625 c
49.207203 14.386425 l
47.044304 14.146125 44.7691 13.889725 43.279102 13.761625 c
h
47.797302 23.166426 m
47.797302 15.620125 l
47.797302 13.841725 46.932102 10.781525 43.647602 9.5318251 c
44.208401 9.0832253 44.929401 8.3622246 45.313904 7.801425 c
49.239304 9.6920252 50.104401 12.848325 50.104401 15.652125 c
50.104401 23.166426 l
47.797302 23.166426 l
h
W
0 0 132 43 rc
42.279102 24.166426 m
59.548 24.166426 l
59.548 6.801425 l
42.279102 6.801425 l
h
f
Q
q
85.835304 20.458725 m
85.835304 18.183624 l
97.018501 18.183624 l
97.018501 20.458725 l
85.835304 20.458725 l
h
85.194405 15.732325 m
85.194405 13.489225 l
96.377701 13.489225 l
96.377701 15.732325 l
85.194405 15.732325 l
h
83.287804 10.733425 m
83.287804 8.4583254 l
97.867699 8.4583254 l
97.867699 10.733425 l
83.287804 10.733425 l
h
89.344101 23.246525 m
89.344101 9.6119251 l
91.779404 9.6119251 l
91.779404 23.246525 l
89.344101 23.246525 l
h
85.578903 23.086325 m
85.034203 20.923325 84.008804 18.728325 82.775101 17.414625 c
83.367905 17.094126 84.409302 16.405226 84.873901 16.004625 c
86.107605 17.542725 87.293304 20.058226 87.998199 22.541624 c
85.578903 23.086325 l
h
W
0 0 132 43 rc
81.775101 24.246525 m
98.867699 24.246525 l
98.867699 7.4583249 l
81.775101 7.4583249 l
h
f
Q
q
100.91171 17.206326 m
100.91171 15.091425 l
104.45271 15.091425 l
104.45271 17.206326 l
100.91171 17.206326 l
h
103.5717 17.206326 m
103.5717 16.869825 l
103.5397 13.953825 103.4917 12.896425 103.3147 12.640025 c
103.1867 12.479825 103.0427 12.431725 102.8347 12.431725 c
102.57771 12.431725 102.1297 12.447825 101.63271 12.495825 c
101.9697 11.919025 102.2257 11.005825 102.25771 10.316925 c
102.99471 10.316925 103.6677 10.332925 104.1007 10.413025 c
104.5807 10.509125 104.9497 10.669325 105.3017 11.134025 c
105.6867 11.646725 105.7667 13.120725 105.8147 16.389225 c
105.8147 16.645525 105.8307 17.206326 105.8307 17.206326 c
103.5717 17.206326 l
h
108.5547 22.125025 m
109.3877 21.612326 110.4767 20.843225 110.9577 20.298525 c
112.4637 21.852625 l
111.9027 22.381325 110.7817 23.086325 109.9647 23.518925 c
108.5547 22.125025 l
h
110.2207 18.119526 m
109.1787 14.498625 107.0807 11.614625 104.1007 9.9964247 c
104.5967 9.5478249 105.4457 8.5705252 105.7827 8.0738249 c
108.9067 10.044525 111.2457 13.393125 112.5757 17.558825 c
110.2207 18.119526 l
h
101.0237 21.019526 m
101.0237 18.728325 l
113.3607 18.728325 l
113.3607 21.019526 l
101.0237 21.019526 l
h
99.453903 21.019526 m
99.453903 16.212925 l
99.453903 14.114025 99.373802 11.278225 98.188103 9.3876247 c
98.716904 9.1152248 99.7743 8.2500248 100.1749 7.7854252 c
101.63271 9.9804249 101.9057 13.713525 101.9057 16.196924 c
101.9057 21.019526 l
99.453903 21.019526 l
h
105.8787 23.230524 m
105.91071 16.132826 107.1447 8.1379251 110.7657 8.1379251 c
112.4157 8.1379251 113.1687 8.8108253 113.5207 11.935125 c
112.89671 12.175425 112.0787 12.720125 111.5507 13.264925 c
111.4707 11.310225 111.2777 10.509125 110.9577 10.509125 c
109.5957 10.509125 108.1697 17.158224 108.3297 23.230524 c
105.8787 23.230524 l
h
W
0 0 132 43 rc
97.188103 24.518925 m
114.5207 24.518925 l
114.5207 6.7854252 l
97.188103 6.7854252 l
h
f
Q
q
64.438103 13.844025 m
68.064102 13.844025 l
66.280205 19.467325 l
64.438103 13.844025 l
h
64.622299 22.734625 m
67.9963 22.734625 l
73.057205 8.4438248 l
69.819 8.4438248 l
68.897903 11.381425 l
63.633404 11.381425 l
62.644501 8.4438248 l
59.522602 8.4438248 l
64.622299 22.734625 l
h
W
0 0 132 43 rc
58.522602 23.734625 m
74.057205 23.734625 l
74.057205 7.4438248 l
58.522602 7.4438248 l
h
f
Q
q
75.602905 8.4438248 2.9668 14.2908 rc
74.602905 23.734625 m
79.569702 23.734625 l
79.569702 7.4438248 l
74.602905 7.4438248 l
h
f
Q
q
73.842606 20.303724 6.2824001 2.4309001 rc
72.842606 23.734625 m
81.125 23.734625 l
81.125 19.303724 l
72.842606 19.303724 l
h
f
Q
q
73.842606 8.4404249 6.2824001 2.4309001 rc
72.842606 11.871325 m
81.125 11.871325 l
81.125 7.4404249 l
72.842606 7.4404249 l
h
f
Q
q
48.426804 27.137224 m
49.564201 26.764826 50.711803 26.281626 51.396301 25.899124 c
52.010303 26.422525 l
51.275501 26.805124 50.037403 27.278225 48.899902 27.640526 c
48.426804 27.137224 l
h
43.031303 28.445826 m
43.031303 27.801624 l
51.970001 27.801624 l
51.970001 28.445826 l
43.031303 28.445826 l
h
43.313202 34.284206 m
43.313202 33.629906 l
51.708302 33.629906 l
51.708302 34.284206 l
43.313202 34.284206 l
h
45.940403 27.640526 m
45.266003 27.207726 43.917202 26.694324 42.840103 26.432625 c
43.001102 26.291725 43.252804 26.030025 43.363503 25.879025 c
44.440601 26.160826 45.789501 26.684324 46.635002 27.197624 c
45.940403 27.640526 l
h
44.833202 31.797825 m
44.833202 31.324724 l
50.067501 31.324724 l
50.067501 31.797825 l
44.833202 31.797825 l
h
44.833202 30.730825 m
44.833202 30.237625 l
50.067501 30.237625 l
50.067501 30.730825 l
44.833202 30.730825 l
h
44.833202 29.633625 m
44.833202 29.150524 l
50.067501 29.150524 l
50.067501 29.633625 l
44.833202 29.633625 l
h
44.480904 32.995747 m
44.480904 28.143925 l
45.205601 28.143925 l
45.205601 32.462227 l
49.795803 32.462227 l
49.795803 28.143925 l
50.550701 28.143925 l
50.550701 32.995747 l
44.480904 32.995747 l
h
47.762402 35.119686 m
47.017502 35.119686 l
47.017502 32.734024 l
47.762402 32.734024 l
47.762402 35.119686 l
h
W
0 0 132 43 rc
41.840103 36.119686 m
53.010303 36.119686 l
53.010303 24.879025 l
41.840103 24.879025 l
h
f
Q
q
57.134003 35.099556 m
57.0937 33.549374 57.154102 28.627026 52.956501 26.503124 c
53.188004 26.342026 53.439701 26.110525 53.570602 25.909225 c
57.848602 28.204325 57.929203 33.317856 57.969402 35.099556 c
57.134003 35.099556 l
h
57.878803 33.861423 m
57.154102 33.780895 l
57.295002 32.905144 57.707703 27.811726 61.693901 25.949425 c
61.804604 26.160826 62.0261 26.422525 62.247501 26.593725 c
58.382202 28.315025 57.969402 33.136665 57.878803 33.861423 c
h
W
0 0 132 43 rc
51.956501 36.099556 m
63.247501 36.099556 l
63.247501 24.909225 l
51.956501 24.909225 l
h
f
Q
q
64.351402 34.576115 m
64.351402 33.881554 l
72.092201 33.881554 l
72.092201 34.576115 l
64.351402 34.576115 l
h
63.918503 34.576115 m
63.918503 31.727425 l
63.918503 30.167126 63.827904 28.002926 62.942101 26.462826 c
63.133404 26.392426 63.455502 26.201124 63.596401 26.080324 c
64.522499 27.690926 64.663399 30.086624 64.663399 31.727425 c
64.663399 34.576115 l
63.918503 34.576115 l
h
66.314201 30.730825 m
70.521904 30.730825 l
70.521904 29.774626 l
66.314201 29.774626 l
66.314201 30.730825 l
h
66.314201 32.230724 m
70.521904 32.230724 l
70.521904 31.294525 l
66.314201 31.294525 l
66.314201 32.230724 l
h
65.569405 32.834686 m
65.569405 29.180725 l
71.286903 29.180725 l
71.286903 32.834686 l
65.569405 32.834686 l
h
68.0355 29.663824 m
68.0355 26.714525 l
68.0355 26.593725 67.9953 26.553425 67.844299 26.543325 c
67.693298 26.543325 67.169899 26.543325 66.576004 26.553425 c
66.676605 26.362225 66.777306 26.080324 66.807503 25.889025 c
67.592606 25.889025 68.085899 25.889025 68.387901 25.999825 c
68.689804 26.110525 68.770401 26.311825 68.770401 26.704426 c
68.770401 29.663824 l
68.0355 29.663824 l
h
67.934898 33.770836 m
67.814102 33.408455 67.592606 32.905144 67.401405 32.542725 c
68.085899 32.401825 l
68.307304 32.713894 68.569099 33.186996 68.800606 33.639977 c
67.934898 33.770836 l
h
69.625999 28.335125 m
70.230003 27.690926 71.035202 26.784925 71.417801 26.251425 c
72.051903 26.644026 l
71.639198 27.167425 70.8339 28.043224 70.219902 28.657225 c
69.625999 28.335125 l
h
66.324303 28.677425 m
65.881401 28.002926 65.217003 27.237925 64.613106 26.724525 c
64.794304 26.623924 65.1063 26.422525 65.257301 26.311825 c
65.820999 26.855425 66.525604 27.700926 67.039001 28.435825 c
66.324303 28.677425 l
h
W
0 0 132 43 rc
61.942101 35.576115 m
73.092201 35.576115 l
73.092201 24.889025 l
61.942101 24.889025 l
h
f
Q
q
79.188805 34.022484 m
79.188805 28.455925 l
79.893402 28.455925 l
79.893402 34.022484 l
79.188805 34.022484 l
h
81.091301 35.089497 m
81.091301 26.875525 l
81.091301 26.704426 81.020805 26.654125 80.849701 26.644026 c
80.688599 26.633924 80.145103 26.633924 79.530998 26.654125 c
79.631699 26.432625 79.742401 26.100426 79.7827 25.899124 c
80.608101 25.899124 81.111404 25.919226 81.403305 26.040026 c
81.695305 26.170925 81.816002 26.402426 81.816002 26.875525 c
81.816002 35.089497 l
81.091301 35.089497 l
h
74.336899 30.811424 m
74.336899 30.308125 l
77.709099 30.308125 l
77.709099 30.811424 l
74.336899 30.811424 l
h
74.800003 26.956125 m
74.800003 26.362225 l
77.9104 26.362225 l
77.9104 26.956125 l
74.800003 26.956125 l
h
73.904099 32.019325 m
73.904099 30.660425 l
73.904099 29.512825 73.803406 27.851925 72.9981 26.623924 c
73.1894 26.553425 73.501404 26.412525 73.642403 26.291725 c
74.457703 27.570126 74.608704 29.402124 74.608704 30.660425 c
74.608704 32.019325 l
73.904099 32.019325 l
h
74.326904 32.019325 m
74.326904 31.455626 l
77.336601 31.455626 l
77.336601 29.613525 l
74.286598 29.613525 l
74.286598 29.049826 l
78.031204 29.049826 l
78.031204 32.019325 l
74.326904 32.019325 l
h
74.508102 28.586824 m
74.508102 25.939425 l
75.162399 25.939425 l
75.162399 28.023125 l
77.598305 28.023125 l
77.598305 25.959524 l
78.272804 25.959524 l
78.272804 28.586824 l
74.508102 28.586824 l
h
75.867004 35.059296 m
75.252899 34.052685 74.135605 33.186996 73.018303 32.653496 c
73.149101 32.492424 73.360504 32.120026 73.441002 31.958925 c
74.628799 32.603127 75.846802 33.619835 76.561501 34.807644 c
75.867004 35.059296 l
h
75.635506 34.233875 m
76.491104 33.710434 77.648705 32.945415 78.222404 32.462227 c
78.625099 33.086334 l
78.0513 33.549374 76.863503 34.274136 76.028 34.767376 c
75.635506 34.233875 l
h
75.001305 33.025936 m
75.001305 32.522625 l
77.125198 32.522625 l
77.125198 33.025936 l
75.001305 33.025936 l
h
W
0 0 132 43 rc
71.9981 36.089497 m
82.816002 36.089497 l
82.816002 24.899124 l
71.9981 24.899124 l
h
f
Q
q
33.230301 21.324326 m
33.230301 16.078924 28.978102 11.826625 23.732702 11.826625 c
18.487303 11.826625 14.235002 16.078924 14.235002 21.324326 c
14.235002 26.569725 18.487303 30.821924 23.732702 30.821924 c
28.978102 30.821924 33.230301 26.569725 33.230301 21.324326 c
h
35.388702 21.324326 m
35.388702 14.886825 30.170101 9.6682253 23.732702 9.6682253 c
17.295202 9.6682253 12.076602 14.886825 12.076602 21.324326 c
12.076602 27.761724 17.295202 32.980347 23.732702 32.980347 c
30.170101 32.980347 35.388702 27.761724 35.388702 21.324326 c
h
18.118002 18.630726 m
21.631102 15.785825 26.655401 15.785825 30.168503 18.630726 c
28.810102 20.308125 l
26.089003 18.104626 22.197502 18.104626 19.476402 20.308125 c
18.118002 18.630726 l
h
19.581102 22.324326 m
19.581102 25.240225 l
21.739502 25.240225 l
21.739502 22.324326 l
19.581102 22.324326 l
h
26.278803 25.240225 m
26.278803 22.324326 l
28.437202 22.324326 l
28.437202 25.240225 l
26.278803 25.240225 l
h
W*
0 0 132 43 rc
11.076602 33.980347 m
36.388702 33.980347 l
36.388702 8.6682253 l
11.076602 8.6682253 l
h
f
ep
end
%%Trailer
%%EOF
