%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.7.4 (Build 20G1120) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 131 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 131 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0.643543 42 m
115.78683 42 l
123.79483 42 130.28683 35.508125 130.28683 27.500025 c
130.28683 1.326025 l
15.143543 1.326025 l
7.1354132 1.326025 0.643543 7.817925 0.643543 15.826025 c
0.643543 42 l
h
W
0 0 131 43 rc
-0.356457 43 m
131.28683 43 l
131.28683 0.32602501 l
-0.356457 0.32602501 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 131 43 rc
1 0 0 -1 0.643543 42 cm
0 0 m
115.14329 0 l
123.15129 0 129.6433 6.4918752 129.6433 14.499975 c
129.6433 40.673977 l
14.5 40.673977 l
6.4918699 40.673977 0 34.182076 0 26.173975 c
0 0 l
h
S
Q
1 1 1 sc
q
48.174934 27.137224 m
49.312332 26.764826 50.459934 26.281626 51.144432 25.899124 c
51.758434 26.422525 l
51.023632 26.805025 49.785534 27.278126 48.648033 27.640526 c
48.174934 27.137224 l
h
42.779434 28.445826 m
42.779434 27.801624 l
51.718132 27.801624 l
51.718132 28.445826 l
42.779434 28.445826 l
h
43.061333 34.284176 m
43.061333 33.629875 l
51.456432 33.629875 l
51.456432 34.284176 l
43.061333 34.284176 l
h
45.688534 27.640526 m
45.014133 27.207726 43.665333 26.694324 42.588234 26.432625 c
42.749233 26.291725 43.000935 26.029924 43.111633 25.879025 c
44.188732 26.160826 45.537632 26.684225 46.383133 27.197624 c
45.688534 27.640526 l
h
44.581333 31.797825 m
44.581333 31.324724 l
49.815632 31.324724 l
49.815632 31.797825 l
44.581333 31.797825 l
h
44.581333 30.730825 m
44.581333 30.237625 l
49.815632 30.237625 l
49.815632 30.730825 l
44.581333 30.730825 l
h
44.581333 29.633625 m
44.581333 29.150425 l
49.815632 29.150425 l
49.815632 29.633625 l
44.581333 29.633625 l
h
44.229034 32.995716 m
44.229034 28.143826 l
44.953732 28.143826 l
44.953732 32.462227 l
49.543934 32.462227 l
49.543934 28.143826 l
50.298832 28.143826 l
50.298832 32.995716 l
44.229034 32.995716 l
h
47.510532 35.119663 m
46.765633 35.119663 l
46.765633 32.733994 l
47.510532 32.733994 l
47.510532 35.119663 l
h
W
0 0 131 43 rc
41.588234 36.119663 m
52.758434 36.119663 l
52.758434 24.879025 l
41.588234 24.879025 l
h
f
Q
q
56.882133 35.099525 m
56.841831 33.549343 56.902233 28.627026 52.704632 26.503124 c
52.936134 26.342026 53.187832 26.110525 53.318733 25.909225 c
57.596733 28.204226 57.677334 33.317825 57.717533 35.099525 c
56.882133 35.099525 l
h
57.626934 33.861397 m
56.902233 33.780865 l
57.043133 32.905113 57.455833 27.811625 61.442032 25.949425 c
61.552734 26.160826 61.774235 26.422525 61.995632 26.593624 c
58.130333 28.314924 57.717533 33.136635 57.626934 33.861397 c
h
W
0 0 131 43 rc
51.704632 36.099525 m
62.995632 36.099525 l
62.995632 24.909225 l
51.704632 24.909225 l
h
f
Q
q
62.619732 29.784624 m
62.821133 29.049826 l
63.656532 29.341724 64.723534 29.714125 65.720131 30.066525 c
65.609436 30.761024 l
64.51223 30.378525 63.374733 30.006124 62.619732 29.784624 c
h
62.770733 33.106445 m
62.770733 32.401825 l
65.609436 32.401825 l
65.609436 33.106445 l
62.770733 33.106445 l
h
63.938435 35.129726 m
63.938435 26.805025 l
63.938435 26.674225 63.888134 26.633924 63.757233 26.633924 c
63.646534 26.633924 63.274033 26.633924 62.841232 26.644026 c
62.941833 26.432625 63.042534 26.110525 63.072735 25.919226 c
63.686733 25.919226 64.069336 25.939325 64.32093 26.060125 c
64.562531 26.180925 64.65313 26.392324 64.65313 26.815125 c
64.65313 35.129726 l
63.938435 35.129726 l
h
65.981834 30.348326 m
65.981834 29.704124 l
71.739632 29.704124 l
71.739632 30.348326 l
65.981834 30.348326 l
h
65.559036 28.536425 m
65.559036 27.892225 l
71.97113 27.892225 l
71.97113 28.536425 l
65.559036 28.536425 l
h
67.330734 31.012726 m
67.330734 28.103624 l
68.015236 28.103624 l
68.015236 31.012726 l
67.330734 31.012726 l
h
69.706329 31.032825 m
69.706329 28.103624 l
70.400833 28.103624 l
70.400833 31.032825 l
69.706329 31.032825 l
h
66.273735 34.717014 m
66.273735 34.193577 l
67.964836 34.193577 l
67.964836 33.247364 l
66.273735 33.247364 l
66.273735 32.723927 l
68.578934 32.723927 l
68.578934 34.717014 l
66.273735 34.717014 l
h
69.333832 34.717014 m
69.333832 34.193577 l
71.065231 34.193577 l
71.065231 33.277565 l
69.333832 33.277565 l
69.333832 32.754124 l
71.669235 32.754124 l
71.669235 34.717014 l
69.333832 34.717014 l
h
67.652832 27.761326 m
67.089134 27.197624 66.122734 26.674225 65.257133 26.342026 c
65.42823 26.221226 65.71003 25.979626 65.840935 25.848825 c
66.686432 26.231325 67.713234 26.865425 68.337334 27.499624 c
67.652832 27.761326 l
h
69.293633 27.429125 m
70.058632 26.956024 71.045135 26.261524 71.53833 25.828625 c
72.16243 26.231325 l
71.63903 26.674225 70.642433 27.338526 69.887535 27.791525 c
69.293633 27.429125 l
h
69.021835 34.717014 m
69.021835 32.270924 l
69.021835 31.536125 69.203033 31.284525 69.917732 31.284525 c
70.078735 31.284525 71.075333 31.284525 71.286736 31.284525 c
71.568535 31.284525 71.840332 31.284525 71.981232 31.334826 c
71.961136 31.475725 71.930931 31.737425 71.92083 31.918625 c
71.759834 31.878426 71.457832 31.858225 71.276634 31.858225 c
71.075333 31.858225 70.13913 31.858225 69.937836 31.858225 c
69.706329 31.858225 69.65593 31.958925 69.65593 32.260925 c
69.65593 34.717014 l
69.021835 34.717014 l
h
65.941536 34.717014 m
65.941536 32.230724 l
65.941536 31.495825 66.122734 31.234125 66.847534 31.234125 c
66.978432 31.234125 67.924629 31.234125 68.136032 31.234125 c
68.40773 31.234125 68.669533 31.244225 68.810432 31.284525 c
68.780235 31.435425 68.760132 31.697226 68.739929 31.858225 c
68.578934 31.828026 68.307137 31.818026 68.125931 31.818026 c
67.924629 31.818026 67.038834 31.818026 66.847534 31.818026 c
66.62603 31.818026 66.575729 31.908525 66.575729 32.220627 c
66.575729 34.717014 l
65.941536 34.717014 l
h
W
0 0 131 43 rc
61.619732 36.129726 m
73.16243 36.129726 l
73.16243 24.828625 l
61.619732 24.828625 l
h
f
Q
q
73.169029 34.324436 m
73.169029 32.532623 l
73.863632 32.532623 l
73.863632 33.660076 l
81.010536 33.660076 l
81.010536 32.532623 l
81.725235 32.532623 l
81.725235 34.324436 l
73.169029 34.324436 l
h
76.722336 33.337963 m
76.15863 33.096375 75.192329 32.844727 74.366936 32.673595 c
74.437332 32.532623 74.527931 32.321323 74.56823 32.180325 c
75.433929 32.331326 76.460632 32.572926 77.195534 32.844727 c
76.722336 33.337963 l
h
74.366936 32.673595 m
74.366936 30.086624 l
75.05143 30.086624 l
75.05143 32.522625 l
74.366936 32.673595 l
h
74.366936 30.368425 m
74.366936 29.804726 l
80.507233 29.804726 l
80.507233 32.824585 l
77.708832 32.824585 l
77.708832 32.270924 l
79.81263 32.270924 l
79.81263 30.368425 l
74.366936 30.368425 l
h
74.638733 31.596525 m
74.638733 31.052925 l
77.014336 31.052925 l
77.014336 31.596525 l
74.638733 31.596525 l
h
77.89003 31.596525 m
77.89003 31.052925 l
80.195236 31.052925 l
80.195236 31.596525 l
77.89003 31.596525 l
h
75.786232 30.106726 m
75.182236 29.180626 74.014633 28.415625 72.846931 27.962626 c
72.987831 27.821726 73.209335 27.509726 73.299934 27.358725 c
74.517937 27.912325 75.766136 28.808226 76.460632 29.905424 c
75.786232 30.106726 l
h
75.353432 29.150425 m
74.729332 28.536425 l
80.940033 28.536425 l
80.940033 29.150425 l
75.353432 29.150425 l
h
80.698532 29.150425 m
80.698532 29.049826 l
80.597832 27.419125 80.497131 26.795025 80.326035 26.613825 c
80.245537 26.533224 80.15493 26.523226 79.973732 26.533224 c
79.81263 26.523226 79.349632 26.533224 78.85643 26.573524 c
78.977234 26.392324 79.057732 26.110525 79.067833 25.909225 c
79.571136 25.889025 80.05423 25.879025 80.305931 25.899124 c
80.58773 25.919226 80.768936 25.979626 80.950134 26.160826 c
81.191734 26.422525 81.312531 27.107025 81.423233 28.848524 c
81.433334 28.949125 81.443436 29.150425 81.443436 29.150425 c
80.698532 29.150425 l
h
75.071533 28.224424 m
74.880333 27.640526 74.538033 26.885626 74.135429 26.432625 c
74.749435 26.130625 l
75.152031 26.613825 75.464134 27.378824 75.675529 27.982824 c
75.071533 28.224424 l
h
76.10833 28.073425 m
76.309631 27.499624 76.45063 26.764826 76.45063 26.301725 c
77.064636 26.382324 l
77.064636 26.855425 76.913635 27.580126 76.69223 28.143826 c
76.10833 28.073425 l
h
77.386734 28.063326 m
77.678635 27.580126 77.950432 26.925825 78.03093 26.503124 c
78.61483 26.684225 l
78.534233 27.107025 78.242332 27.741224 77.930336 28.224424 c
77.386734 28.063326 l
h
78.645035 28.083426 m
78.987236 27.751225 79.359734 27.278126 79.510735 26.946026 c
80.034134 27.217726 l
79.883133 27.539925 79.500633 28.002926 79.158333 28.325026 c
78.645035 28.083426 l
h
76.69223 34.978737 m
76.913635 34.596226 77.135132 34.102985 77.225731 33.780865 c
78.010834 34.032524 l
77.930336 34.354633 77.678635 34.837814 77.45723 35.190125 c
76.69223 34.978737 l
h
W
0 0 131 43 rc
71.846931 36.190125 m
82.725235 36.190125 l
82.725235 24.879025 l
71.846931 24.879025 l
h
f
Q
q
52.656433 21.275826 m
52.656433 19.112925 l
58.007732 19.112925 l
58.007732 21.275826 l
52.656433 21.275826 l
h
52.656433 13.777625 m
52.656433 11.614625 l
58.296131 11.614625 l
58.296131 13.777625 l
52.656433 13.777625 l
h
52.496235 17.510725 m
52.496235 15.411825 l
57.623234 15.411825 l
57.623234 17.510725 l
52.496235 17.510725 l
h
43.716232 21.275826 m
43.716232 19.112925 l
48.634933 19.112925 l
48.634933 21.275826 l
43.716232 21.275826 l
h
43.876434 17.510725 m
43.876434 15.411825 l
48.506733 15.411825 l
48.506733 17.510725 l
43.876434 17.510725 l
h
51.470734 23.166426 m
51.470734 8.0257254 l
53.809933 8.0257254 l
53.809933 23.166426 l
51.470734 23.166426 l
h
43.027233 13.761625 m
43.443832 11.438425 l
45.062035 11.694725 47.112831 12.015225 49.035435 12.335625 c
48.955334 14.386425 l
46.792435 14.146125 44.517235 13.889725 43.027233 13.761625 c
h
47.545433 23.166426 m
47.545433 15.620125 l
47.545433 13.841725 46.680233 10.781525 43.395733 9.5318251 c
43.956532 9.0832253 44.677532 8.3622246 45.062035 7.801425 c
48.987434 9.6920252 49.852531 12.848325 49.852531 15.652125 c
49.852531 23.166426 l
47.545433 23.166426 l
h
W
0 0 131 43 rc
42.027233 24.166426 m
59.296131 24.166426 l
59.296131 6.801425 l
42.027233 6.801425 l
h
f
Q
q
85.583435 20.458725 m
85.583435 18.183624 l
96.766632 18.183624 l
96.766632 20.458725 l
85.583435 20.458725 l
h
84.942535 15.732325 m
84.942535 13.489225 l
96.125832 13.489225 l
96.125832 15.732325 l
84.942535 15.732325 l
h
83.035934 10.733425 m
83.035934 8.4583254 l
97.615829 8.4583254 l
97.615829 10.733425 l
83.035934 10.733425 l
h
89.092232 23.246525 m
89.092232 9.6119251 l
91.527534 9.6119251 l
91.527534 23.246525 l
89.092232 23.246525 l
h
85.327034 23.086325 m
84.782333 20.923325 83.756935 18.728325 82.523232 17.414625 c
83.116035 17.094126 84.157433 16.405226 84.622032 16.004625 c
85.855736 17.542725 87.041435 20.058226 87.74633 22.541624 c
85.327034 23.086325 l
h
W
0 0 131 43 rc
81.523232 24.246525 m
98.615829 24.246525 l
98.615829 7.4583249 l
81.523232 7.4583249 l
h
f
Q
q
100.65984 17.206326 m
100.65984 15.091425 l
104.20084 15.091425 l
104.20084 17.206326 l
100.65984 17.206326 l
h
103.31983 17.206326 m
103.31983 16.869825 l
103.28783 13.953825 103.23983 12.896425 103.06284 12.640025 c
102.93483 12.479825 102.79083 12.431725 102.58283 12.431725 c
102.32584 12.431725 101.87783 12.447825 101.38084 12.495825 c
101.71783 11.919025 101.97383 11.005825 102.00584 10.316925 c
102.74284 10.316925 103.41583 10.332925 103.84883 10.413025 c
104.32883 10.509125 104.69783 10.669325 105.04984 11.134025 c
105.43483 11.646725 105.51483 13.120725 105.56284 16.389225 c
105.56284 16.645525 105.57883 17.206326 105.57883 17.206326 c
103.31983 17.206326 l
h
108.30283 22.125025 m
109.13583 21.612326 110.22483 20.843225 110.70583 20.298525 c
112.21183 21.852625 l
111.65083 22.381325 110.52983 23.086325 109.71283 23.518925 c
108.30283 22.125025 l
h
109.96883 18.119526 m
108.92683 14.498625 106.82883 11.614625 103.84883 9.9964247 c
104.34483 9.5478249 105.19383 8.5705252 105.53083 8.0738249 c
108.65483 10.044525 110.99384 13.393125 112.32383 17.558825 c
109.96883 18.119526 l
h
100.77184 21.019526 m
100.77184 18.728325 l
113.10883 18.728325 l
113.10883 21.019526 l
100.77184 21.019526 l
h
99.201836 21.019526 m
99.201836 16.212925 l
99.201836 14.114025 99.121933 11.278225 97.936234 9.3876247 c
98.465034 9.1152248 99.522835 8.2500248 99.922836 7.7854252 c
101.38084 9.9804249 101.65383 13.713525 101.65383 16.196924 c
101.65383 21.019526 l
99.201836 21.019526 l
h
105.62683 23.230524 m
105.65884 16.132826 106.89283 8.1379251 110.51383 8.1379251 c
112.16383 8.1379251 112.91683 8.8108253 113.26883 11.935125 c
112.64484 12.175425 111.82684 12.720125 111.29884 13.264925 c
111.21883 11.310225 111.02583 10.509125 110.70583 10.509125 c
109.34383 10.509125 107.91783 17.158224 108.07784 23.230524 c
105.62683 23.230524 l
h
W
0 0 131 43 rc
96.936234 24.518925 m
114.26883 24.518925 l
114.26883 6.7854252 l
96.936234 6.7854252 l
h
f
Q
q
64.186234 13.844025 m
67.812233 13.844025 l
66.028336 19.467325 l
64.186234 13.844025 l
h
64.37043 22.734625 m
67.744431 22.734625 l
72.805336 8.4438248 l
69.567131 8.4438248 l
68.646034 11.381425 l
63.381535 11.381425 l
62.392632 8.4438248 l
59.270733 8.4438248 l
64.37043 22.734625 l
h
W
0 0 131 43 rc
58.270733 23.734625 m
73.805336 23.734625 l
73.805336 7.4438248 l
58.270733 7.4438248 l
h
f
Q
q
75.351036 8.4438248 2.9668 14.2908 rc
74.351036 23.734625 m
79.317833 23.734625 l
79.317833 7.4438248 l
74.351036 7.4438248 l
h
f
Q
q
73.590736 20.303724 6.2824001 2.4309001 rc
72.590736 23.734625 m
80.873131 23.734625 l
80.873131 19.303724 l
72.590736 19.303724 l
h
f
Q
q
73.590736 8.4404249 6.2824001 2.4309001 rc
72.590736 11.871325 m
80.873131 11.871325 l
80.873131 7.4404249 l
72.590736 7.4404249 l
h
f
Q
q
32.873833 21.324326 m
32.873833 16.078924 28.621634 11.826625 23.376232 11.826625 c
18.130833 11.826625 13.878533 16.078924 13.878533 21.324326 c
13.878533 26.569725 18.130833 30.821924 23.376232 30.821924 c
28.621634 30.821924 32.873833 26.569725 32.873833 21.324326 c
h
35.032234 21.324326 m
35.032234 14.886825 29.813633 9.6682253 23.376232 9.6682253 c
16.938732 9.6682253 11.720133 14.886825 11.720133 21.324326 c
11.720133 27.761724 16.938732 32.980347 23.376232 32.980347 c
29.813633 32.980347 35.032234 27.761724 35.032234 21.324326 c
h
17.761534 18.630726 m
21.274733 15.785825 26.298933 15.785825 29.812033 18.630726 c
28.453733 20.308125 l
25.732533 18.104626 21.841034 18.104626 19.119932 20.308125 c
17.761534 18.630726 l
h
19.224632 22.324326 m
19.224632 25.240225 l
21.383034 25.240225 l
21.383034 22.324326 l
19.224632 22.324326 l
h
25.922333 25.240225 m
25.922333 22.324326 l
28.080732 22.324326 l
28.080732 25.240225 l
25.922333 25.240225 l
h
W*
0 0 131 43 rc
10.720133 33.980347 m
36.032234 33.980347 l
36.032234 8.6682253 l
10.720133 8.6682253 l
h
f
ep
end
%%Trailer
%%EOF
