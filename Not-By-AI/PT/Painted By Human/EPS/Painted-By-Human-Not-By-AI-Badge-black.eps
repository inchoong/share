%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.7.4 (Build 20G1120) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.14336 42 l
124.15136 42 130.64336 35.508125 130.64336 27.499977 c
130.64336 1.325977 l
15.499963 1.325977 l
7.4918728 1.325977 1 7.8178768 1 15.825977 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
131.64336 43 l
131.64336 0.325977 l
0 0.325977 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.14336 0 l
123.15136 0 129.64336 6.4918728 129.64336 14.500023 c
129.64336 40.674023 l
14.499963 40.674023 l
6.4918728 40.674023 0 34.182121 0 26.174023 c
0 0 l
h
S
Q
1 1 1 sc
q
106.54036 15.547877 m
109.82137 15.547877 l
108.20736 20.635777 l
106.54036 15.547877 l
h
106.70736 23.592077 m
109.75936 23.592077 l
114.33936 10.661677 l
111.40936 10.661677 l
110.57536 13.319677 l
105.81236 13.319677 l
104.91737 10.661677 l
102.09336 10.661677 l
106.70736 23.592077 l
h
W
0 0 132 43 rc
101.09336 24.592077 m
115.33936 24.592077 l
115.33936 9.6616774 l
101.09336 9.6616774 l
h
f
Q
q
116.64236 10.661677 2.684 12.9304 rc
115.64236 24.592077 m
120.32636 24.592077 l
120.32636 9.6616774 l
115.64236 9.6616774 l
h
f
Q
q
115.04936 21.392576 5.6849999 2.1995001 rc
114.04936 24.592077 m
121.73436 24.592077 l
121.73436 20.392576 l
114.04936 20.392576 l
h
f
Q
q
115.04936 10.658777 5.6849999 2.1993999 rc
114.04936 13.858177 m
121.73436 13.858177 l
121.73436 9.6587772 l
114.04936 9.6587772 l
h
f
Q
q
47.133263 20.577078 m
48.131863 20.577078 48.947365 20.314077 49.579563 19.788177 c
50.217762 19.268177 50.536861 18.402576 50.536861 17.191177 c
50.536861 10.685277 l
47.948662 10.685277 l
47.948662 16.561876 l
47.948662 17.070078 47.880764 17.460077 47.744862 17.731876 c
47.496662 18.228176 47.023964 18.476377 46.326664 18.476377 c
45.469864 18.476377 44.881863 18.112976 44.562763 17.386177 c
44.397362 17.002077 44.314663 16.511677 44.314663 15.914777 c
44.314663 10.685277 l
41.797363 10.685277 l
41.797363 20.328876 l
44.234863 20.328876 l
44.234863 18.919577 l
44.559864 19.415977 44.867165 19.773478 45.156662 19.992077 c
45.676662 20.382076 46.335564 20.577078 47.133263 20.577078 c
h
W
0 0 132 43 rc
40.797363 21.577078 m
51.536861 21.577078 l
51.536861 9.685277 l
40.797363 9.685277 l
h
f
Q
q
57.296265 15.382977 m
57.136662 15.282577 56.974163 15.199777 56.808762 15.134777 c
56.649162 15.075777 56.427563 15.019577 56.143963 14.966377 c
55.576664 14.860077 l
55.044865 14.765477 54.663761 14.650277 54.433262 14.514377 c
54.043262 14.283877 53.848263 13.926377 53.848263 13.441877 c
53.848263 13.010477 53.966461 12.697377 54.202862 12.502377 c
54.445065 12.313277 54.737564 12.218677 55.080364 12.218677 c
55.623962 12.218677 56.123264 12.378277 56.578262 12.697377 c
57.039162 13.016477 57.278461 13.598477 57.296265 14.443477 c
57.296265 15.382977 l
h
55.762863 16.561876 m
56.229664 16.620977 56.563461 16.694777 56.764362 16.783478 c
57.124863 16.937077 57.305061 17.176376 57.305061 17.501377 c
57.305061 17.897278 57.166264 18.169077 56.888462 18.316877 c
56.616665 18.470476 56.214863 18.547277 55.683064 18.547277 c
55.086262 18.547277 54.663761 18.399576 54.415562 18.104076 c
54.238262 17.885477 54.120064 17.590076 54.060963 17.217777 c
51.623562 17.217777 l
51.676662 18.062777 51.913063 18.757076 52.332561 19.300676 c
53.000362 20.151577 54.146664 20.577078 55.771664 20.577078 c
56.829365 20.577078 57.768963 20.367277 58.590263 19.947777 c
59.411663 19.528177 59.822365 18.736378 59.822365 17.572277 c
59.822365 13.140477 l
59.822365 12.833277 59.828262 12.460977 59.840061 12.023677 c
59.857761 11.692777 59.908062 11.468277 59.990765 11.350077 c
60.073463 11.231877 60.197563 11.134377 60.363064 11.057577 c
60.363064 10.685277 l
57.615265 10.685277 l
57.538464 10.880277 57.485264 11.063477 57.455765 11.234877 c
57.426262 11.406177 57.402561 11.601177 57.384865 11.819877 c
57.036263 11.441677 56.634361 11.119577 56.179363 10.853677 c
55.635761 10.540577 55.021263 10.383977 54.335762 10.383977 c
53.461262 10.383977 52.737362 10.632077 52.164162 11.128477 c
51.596962 11.630777 51.313263 12.339877 51.313263 13.255777 c
51.313263 14.443477 51.771263 15.303277 52.687164 15.835077 c
53.189465 16.124577 53.928062 16.331377 54.903065 16.455477 c
55.762863 16.561876 l
h
54.752361 23.998377 m
54.911964 23.998377 55.068462 23.980677 55.222164 23.945177 c
55.375763 23.909777 55.505764 23.871378 55.612164 23.829977 c
56.445362 23.519777 l
56.693462 23.437077 56.855965 23.383877 56.932762 23.360176 c
57.009663 23.336576 57.095264 23.324778 57.189861 23.324778 c
57.473461 23.324778 57.671463 23.398678 57.783764 23.546377 c
57.901863 23.699978 57.987564 23.880177 58.040764 24.087076 c
59.219662 24.087076 l
59.113262 23.466578 58.900562 22.946577 58.581463 22.527077 c
58.268265 22.107477 57.807362 21.897778 57.198765 21.897778 c
57.015564 21.897778 56.755562 21.942078 56.418762 22.030678 c
56.223763 22.077976 56.037563 22.131178 55.860363 22.190277 c
55.142365 22.429577 l
55.041962 22.464977 54.944462 22.488676 54.849861 22.500477 c
54.755363 22.518177 54.660763 22.527077 54.566261 22.527077 c
54.341663 22.527077 54.158463 22.462076 54.016663 22.332077 c
53.874863 22.196177 53.774464 22.009977 53.715363 21.773678 c
52.563065 21.773678 l
52.693062 22.382277 52.861462 22.843178 53.068264 23.156378 c
53.446465 23.717676 54.007862 23.998377 54.752361 23.998377 c
h
W
0 0 132 43 rc
50.313263 25.087076 m
61.363064 25.087076 l
61.363064 9.3839769 l
50.313263 9.3839769 l
h
f
Q
q
65.500366 12.466877 m
66.23896 12.466877 66.806267 12.729877 67.202164 13.255777 c
67.598061 13.781677 67.795959 14.529177 67.795959 15.498277 c
67.795959 16.467278 67.598061 17.211878 67.202164 17.731876 c
66.806267 18.257776 66.23896 18.520678 65.500366 18.520678 c
64.761765 18.520678 64.19146 18.257776 63.789661 17.731876 c
63.393764 17.211878 63.195862 16.467278 63.195862 15.498277 c
63.195862 14.529177 63.393764 13.781677 63.789661 13.255777 c
64.19146 12.729877 64.761765 12.466877 65.500366 12.466877 c
h
70.446266 15.498277 m
70.446266 14.080077 70.03846 12.865777 69.223061 11.855277 c
68.407562 10.850777 67.169662 10.348477 65.509163 10.348477 c
63.848763 10.348477 62.610863 10.850777 61.795364 11.855277 c
60.979961 12.865777 60.572163 14.080077 60.572163 15.498277 c
60.572163 16.892776 60.979961 18.101177 61.795364 19.123478 c
62.610863 20.145678 63.848763 20.656878 65.509163 20.656878 c
67.169662 20.656878 68.407562 20.145678 69.223061 19.123478 c
70.03846 18.101177 70.446266 16.892776 70.446266 15.498277 c
h
W
0 0 132 43 rc
59.572163 21.656878 m
71.446266 21.656878 l
71.446266 9.3484774 l
59.572163 9.3484774 l
h
f
Q
q
80.53466 15.494177 m
80.53466 16.238676 80.363266 16.897577 80.020561 17.470778 c
79.683762 18.043978 79.134163 18.330477 78.371964 18.330477 c
77.456062 18.330477 76.82666 17.896177 76.483963 17.027576 c
76.306763 16.566677 76.218063 15.981677 76.218063 15.272577 c
76.218063 14.149877 76.516464 13.360977 77.113266 12.905977 c
77.467865 12.640077 77.88736 12.507177 78.371964 12.507177 c
79.075066 12.507177 79.609863 12.778977 79.976265 13.322577 c
80.348465 13.866277 80.53466 14.590077 80.53466 15.494177 c
h
79.098763 20.537577 m
80.227364 20.537577 81.181664 20.120977 81.961662 19.287777 c
82.747566 18.454576 83.140564 17.231478 83.140564 15.618277 c
83.140564 13.916477 82.756462 12.619377 81.988266 11.727177 c
81.22596 10.834877 80.242165 10.388777 79.036659 10.388777 c
78.268562 10.388777 77.630363 10.580777 77.122162 10.964877 c
76.84446 11.177577 76.572662 11.487877 76.306763 11.895577 c
76.306763 6.8610768 l
73.807159 6.8610768 l
73.807159 20.324778 l
76.226959 20.324778 l
76.226959 18.897778 l
76.498764 19.317377 76.788261 19.648277 77.095566 19.890476 c
77.65696 20.321877 78.324661 20.537577 79.098763 20.537577 c
h
W
0 0 132 43 rc
72.807159 21.537577 m
84.140564 21.537577 l
84.140564 5.8610768 l
72.807159 5.8610768 l
h
f
Q
q
88.699966 12.445277 m
89.43856 12.445277 90.005859 12.708277 90.401764 13.234177 c
90.797661 13.760077 90.99556 14.507577 90.99556 15.476677 c
90.99556 16.445778 90.797661 17.190277 90.401764 17.710278 c
90.005859 18.236177 89.43856 18.499178 88.699966 18.499178 c
87.961266 18.499178 87.39106 18.236177 86.989265 17.710278 c
86.593361 17.190277 86.395363 16.445778 86.395363 15.476677 c
86.395363 14.507577 86.593361 13.760077 86.989265 13.234177 c
87.39106 12.708277 87.961266 12.445277 88.699966 12.445277 c
h
93.64576 15.476677 m
93.64576 14.058477 93.23806 12.844177 92.422661 11.833677 c
91.607162 10.829177 90.369263 10.326877 88.708763 10.326877 c
87.048363 10.326877 85.810364 10.829177 84.994965 11.833677 c
84.179466 12.844177 83.771767 14.058477 83.771767 15.476677 c
83.771767 16.871178 84.179466 18.079576 84.994965 19.101877 c
85.810364 20.124077 87.048363 20.635277 88.708763 20.635277 c
90.369263 20.635277 91.607162 20.124077 92.422661 19.101877 c
93.23806 18.079576 93.64576 16.871178 93.64576 15.476677 c
h
W
0 0 132 43 rc
82.771767 21.635277 m
94.64576 21.635277 l
94.64576 9.3268766 l
82.771767 9.3268766 l
h
f
Q
q
99.80246 20.555477 m
99.849762 20.555477 99.888161 20.552576 99.917664 20.546577 c
99.953163 20.546577 100.02696 20.543676 100.13926 20.537777 c
100.13926 17.949577 l
99.979759 17.967278 99.83786 17.979177 99.71386 17.985077 c
99.58976 17.990976 99.489265 17.993877 99.41246 17.993877 c
98.396065 17.993877 97.713562 17.662977 97.36496 17.001177 c
97.16996 16.628878 97.072464 16.055777 97.072464 15.281677 c
97.072464 10.663777 l
94.528664 10.663777 l
94.528664 20.325077 l
96.93956 20.325077 l
96.93956 18.640978 l
97.329559 19.285076 97.669266 19.725277 97.958862 19.961576 c
98.431564 20.357576 99.046066 20.555477 99.80246 20.555477 c
h
W
0 0 132 43 rc
93.528664 21.555477 m
101.13926 21.555477 l
101.13926 9.6637774 l
93.528664 9.6637774 l
h
f
Q
q
44.157661 27.133778 m
44.565762 27.133778 44.904263 27.303877 45.173061 27.643976 c
45.445164 27.987276 45.581161 28.498978 45.581161 29.179176 c
45.581161 29.593777 45.521263 29.950077 45.401363 30.248077 c
45.174664 30.821377 44.760063 31.107977 44.157661 31.107977 c
43.551964 31.107977 43.137363 30.805178 42.913864 30.199476 c
42.794064 29.875578 42.734161 29.464277 42.734161 28.965477 c
42.734161 28.563778 42.794064 28.222076 42.913864 27.940277 c
43.140564 27.402678 43.555164 27.133778 44.157661 27.133778 c
h
41.893562 31.725077 m
42.743862 31.725077 l
42.743862 31.035177 l
42.918762 31.271578 43.109863 31.454576 43.317162 31.584177 c
43.611862 31.778477 43.958462 31.875677 44.356861 31.875677 c
44.946362 31.875677 45.446762 31.648876 45.858063 31.195477 c
46.269463 30.745277 46.475163 30.100677 46.475163 29.261778 c
46.475163 28.128178 46.178764 27.318377 45.586063 26.832577 c
45.210262 26.524878 44.773064 26.370977 44.274261 26.370977 c
43.882362 26.370977 43.553562 26.456877 43.287964 26.628477 c
43.132462 26.725677 42.959263 26.892477 42.768162 27.128977 c
42.768162 24.471376 l
41.893562 24.471376 l
41.893562 31.725077 l
h
W
0 0 132 43 rc
40.893562 32.875675 m
47.475163 32.875675 l
47.475163 23.471376 l
40.893562 23.471376 l
h
f
Q
q
47.052464 31.725077 m
47.941563 31.725077 l
47.941563 26.545877 l
47.052464 26.545877 l
47.052464 31.725077 l
h
47.052464 33.682987 m
47.941563 33.682987 l
47.941563 32.691856 l
47.052464 32.691856 l
47.052464 33.682987 l
h
W
0 0 132 43 rc
46.052464 34.682987 m
48.941563 34.682987 l
48.941563 25.545877 l
46.052464 25.545877 l
h
f
Q
q
48.820164 31.749277 m
49.650963 31.749277 l
49.650963 31.010878 l
49.897163 31.315277 50.157864 31.533978 50.433163 31.666677 c
50.708565 31.799477 51.014565 31.865877 51.351463 31.865877 c
52.089962 31.865877 52.588764 31.608377 52.847862 31.093477 c
52.990364 30.811678 53.061665 30.408377 53.061665 29.883677 c
53.061665 26.545877 l
52.172562 26.545877 l
52.172562 29.825377 l
52.172562 30.142776 52.125565 30.398678 52.031662 30.592978 c
51.876163 30.916878 51.594364 31.078876 51.186264 31.078876 c
50.978962 31.078876 50.808964 31.057777 50.676163 31.015676 c
50.436462 30.944477 50.225864 30.801876 50.044563 30.588177 c
49.898762 30.416477 49.803265 30.238377 49.757862 30.053677 c
49.715763 29.872377 49.694763 29.611576 49.694763 29.271477 c
49.694763 26.545877 l
48.820164 26.545877 l
48.820164 31.749277 l
h
W
0 0 132 43 rc
47.820164 32.865875 m
54.061665 32.865875 l
54.061665 25.545877 l
47.820164 25.545877 l
h
f
Q
q
54.085964 33.201996 m
54.970264 33.201996 l
54.970264 31.749277 l
55.801064 31.749277 l
55.801064 31.035177 l
54.970264 31.035177 l
54.970264 27.639076 l
54.970264 27.457678 55.031761 27.336277 55.154861 27.274677 c
55.222862 27.239077 55.336262 27.221277 55.494965 27.221277 c
55.537064 27.221277 55.582363 27.221277 55.630962 27.221277 c
55.679562 27.224478 55.736263 27.229378 55.801064 27.235777 c
55.801064 26.545877 l
55.700562 26.516777 55.595364 26.495678 55.485264 26.482777 c
55.378365 26.469776 55.261765 26.463377 55.135365 26.463377 c
54.727264 26.463377 54.450363 26.566977 54.304665 26.774277 c
54.158863 26.984777 54.085964 27.256878 54.085964 27.590477 c
54.085964 31.035177 l
53.381462 31.035177 l
53.381462 31.749277 l
54.085964 31.749277 l
54.085964 33.201996 l
h
W
0 0 132 43 rc
52.381462 34.201996 m
56.801064 34.201996 l
56.801064 25.463377 l
52.381462 25.463377 l
h
f
Q
q
56.903065 27.930576 m
56.903065 27.677977 56.995464 27.478777 57.180061 27.332977 c
57.364662 27.187277 57.583263 27.114376 57.835964 27.114376 c
58.143661 27.114376 58.441662 27.185577 58.729862 27.328176 c
59.215763 27.564577 59.458664 27.951677 59.458664 28.489277 c
59.458664 29.193777 l
59.351765 29.125776 59.214062 29.069077 59.045662 29.023777 c
58.877262 28.978376 58.712063 28.945976 58.550163 28.926577 c
58.020561 28.858578 l
57.703163 28.816477 57.465061 28.750076 57.306362 28.659376 c
57.037563 28.507076 56.903065 28.264177 56.903065 27.930576 c
h
59.021362 29.699078 m
59.222164 29.724977 59.356663 29.809177 59.424664 29.951677 c
59.463463 30.029476 59.482964 30.141176 59.482964 30.286978 c
59.482964 30.584877 59.376064 30.800278 59.162262 30.933077 c
58.951763 31.069178 58.648865 31.137177 58.253761 31.137177 c
57.797062 31.137177 57.473164 31.014076 57.282063 30.767878 c
57.175163 30.631878 57.105564 30.429478 57.073162 30.160578 c
56.256962 30.160578 l
56.273163 30.801876 56.480461 31.247276 56.878864 31.496677 c
57.280464 31.749277 57.745262 31.875677 58.273163 31.875677 c
58.885365 31.875677 59.382565 31.759077 59.764763 31.525877 c
60.143661 31.292578 60.333164 30.929876 60.333164 30.437576 c
60.333164 27.439877 l
60.333164 27.349176 60.350964 27.276278 60.386662 27.221277 c
60.425465 27.166178 60.504864 27.138678 60.624664 27.138678 c
60.663563 27.138678 60.707264 27.140278 60.755863 27.143476 c
60.804462 27.149977 60.856262 27.158077 60.911362 27.167776 c
60.911362 26.521677 l
60.775265 26.482777 60.671661 26.458477 60.600365 26.448776 c
60.529163 26.439077 60.431965 26.434177 60.308865 26.434177 c
60.007664 26.434177 59.789062 26.541077 59.652962 26.754877 c
59.581764 26.868177 59.531563 27.028477 59.502361 27.235777 c
59.324265 27.002577 59.068363 26.800177 58.734764 26.628477 c
58.401161 26.456877 58.033463 26.370977 57.631863 26.370977 c
57.149261 26.370977 56.754162 26.516777 56.446362 26.808277 c
56.141964 27.102978 55.989761 27.470676 55.989761 27.911177 c
55.989761 28.393778 56.140362 28.767878 56.441563 29.033478 c
56.742764 29.299076 57.137962 29.462578 57.627064 29.524178 c
59.021362 29.699078 l
h
W
0 0 132 43 rc
54.989761 32.875675 m
61.911362 32.875675 l
61.911362 25.370977 l
54.989761 25.370977 l
h
f
Q
q
61.877361 29.086878 m
61.877361 28.529778 61.995564 28.063377 62.232063 27.687677 c
62.468464 27.311977 62.847462 27.124077 63.368961 27.124077 c
63.773762 27.124077 64.105766 27.297377 64.364861 27.643976 c
64.627266 27.993776 64.758461 28.494177 64.758461 29.145178 c
64.758461 29.802677 64.624062 30.288576 64.355164 30.602676 c
64.086365 30.920177 63.754364 31.078876 63.359161 31.078876 c
62.918663 31.078876 62.560764 30.910477 62.285461 30.573578 c
62.013462 30.236677 61.877361 29.741177 61.877361 29.086878 c
h
63.194061 31.841677 m
63.592464 31.841677 63.926064 31.757378 64.194862 31.588978 c
64.350365 31.491777 64.526863 31.321777 64.724464 31.078876 c
64.724464 33.707275 l
65.564964 33.707275 l
65.564964 26.545877 l
64.777863 26.545877 l
64.777863 27.269876 l
64.57386 26.949177 64.332565 26.717577 64.053963 26.575077 c
63.775463 26.432577 63.456364 26.361277 63.096863 26.361277 c
62.517063 26.361277 62.015064 26.604177 61.590763 27.090076 c
61.166462 27.579178 60.954262 28.228577 60.954262 29.038277 c
60.954262 29.796177 61.146961 30.452078 61.532463 31.005978 c
61.921062 31.563078 62.474964 31.841677 63.194061 31.841677 c
h
W
0 0 132 43 rc
59.954262 34.707275 m
66.564964 34.707275 l
66.564964 25.361277 l
59.954262 25.361277 l
h
f
Q
q
68.479263 27.109476 m
69.05896 27.109476 69.455765 27.328176 69.669563 27.765377 c
69.886566 28.205877 69.995064 28.694977 69.995064 29.232677 c
69.995064 29.718477 69.917366 30.113676 69.761864 30.418077 c
69.515663 30.897476 69.091362 31.137177 68.48896 31.137177 c
67.954559 31.137177 67.565865 30.933077 67.32296 30.524977 c
67.079964 30.116877 66.958565 29.624577 66.958565 29.047977 c
66.958565 28.494177 67.079964 28.032578 67.32296 27.663378 c
67.565865 27.294077 67.951263 27.109476 68.479263 27.109476 c
h
68.51326 31.899977 m
69.183662 31.899977 69.750565 31.676477 70.213661 31.229477 c
70.676865 30.782476 70.908463 30.124977 70.908463 29.256977 c
70.908463 28.418077 70.704361 27.724876 70.296265 27.177477 c
69.888161 26.630177 69.254967 26.356478 68.39666 26.356478 c
67.680862 26.356478 67.112366 26.597776 66.69136 27.080378 c
66.270264 27.566177 66.059761 28.217278 66.059761 29.033478 c
66.059761 29.907976 66.281563 30.604378 66.725365 31.122578 c
67.16906 31.640778 67.76506 31.899977 68.51326 31.899977 c
h
W
0 0 132 43 rc
65.059761 32.899979 m
71.908463 32.899979 l
71.908463 25.356478 l
65.059761 25.356478 l
h
f
Q
q
75.77626 27.133778 m
76.184364 27.133778 76.522865 27.303778 76.791664 27.643877 c
77.063766 27.987276 77.19976 28.498978 77.19976 29.179176 c
77.19976 29.593777 77.139862 29.950077 77.020065 30.248077 c
76.793266 30.821278 76.378761 31.107977 75.77626 31.107977 c
75.170563 31.107977 74.755966 30.805178 74.532463 30.199476 c
74.412666 29.875578 74.35276 29.464176 74.35276 28.965378 c
74.35276 28.563778 74.412666 28.222076 74.532463 27.940277 c
74.759262 27.402576 75.173866 27.133778 75.77626 27.133778 c
h
73.51226 31.724977 m
74.362465 31.724977 l
74.362465 31.035076 l
74.537361 31.271578 74.728462 31.454576 74.93576 31.584078 c
75.230461 31.778477 75.577065 31.875578 75.975464 31.875578 c
76.564964 31.875578 77.065361 31.648876 77.476761 31.195477 c
77.888062 30.745176 78.093765 30.100677 78.093765 29.261778 c
78.093765 28.128077 77.797363 27.318377 77.204666 26.832577 c
76.828964 26.524878 76.391663 26.370977 75.89286 26.370977 c
75.500961 26.370977 75.172165 26.456778 74.906563 26.628477 c
74.75116 26.725677 74.577866 26.892477 74.386765 27.128878 c
74.386765 24.471376 l
73.51226 24.471376 l
73.51226 31.724977 l
h
W
0 0 132 43 rc
72.51226 32.875576 m
79.093765 32.875576 l
79.093765 23.471376 l
72.51226 23.471376 l
h
f
Q
q
80.934067 27.109476 m
81.513863 27.109476 81.910561 27.328077 82.124367 27.765377 c
82.341362 28.205877 82.44986 28.694977 82.44986 29.232576 c
82.44986 29.718477 82.372162 30.113577 82.21666 30.418077 c
81.970566 30.897476 81.546265 31.137077 80.943764 31.137077 c
80.409363 31.137077 80.02066 30.933077 79.777763 30.524977 c
79.534866 30.116877 79.413361 29.624577 79.413361 29.047977 c
79.413361 28.494177 79.534866 28.032578 79.777763 27.663378 c
80.02066 27.294077 80.406059 27.109476 80.934067 27.109476 c
h
80.968063 31.899878 m
81.638565 31.899878 82.20536 31.676376 82.668564 31.229477 c
83.13166 30.782476 83.363266 30.124977 83.363266 29.256878 c
83.363266 28.417976 83.159264 27.724876 82.75116 27.177477 c
82.342964 26.630077 81.709763 26.356377 80.851463 26.356377 c
80.135666 26.356377 79.567261 26.597677 79.146164 27.080276 c
78.72506 27.566177 78.514565 28.217176 78.514565 29.033377 c
78.514565 29.907976 78.736465 30.604277 79.180161 31.122578 c
79.623863 31.640778 80.219864 31.899878 80.968063 31.899878 c
h
W
0 0 132 43 rc
77.514565 32.899876 m
84.363266 32.899876 l
84.363266 25.356377 l
77.514565 25.356377 l
h
f
Q
q
83.786263 31.749277 m
84.617065 31.749277 l
84.617065 30.850477 l
84.685066 31.025377 84.851959 31.237577 85.117462 31.486977 c
85.383064 31.739576 85.689163 31.865877 86.035767 31.865877 c
86.051964 31.865877 86.07946 31.864277 86.118362 31.861076 c
86.157265 31.857777 86.223663 31.851276 86.317566 31.841578 c
86.317566 30.918476 l
86.265762 30.928177 86.217163 30.934677 86.171761 30.937977 c
86.129662 30.941177 86.082764 30.942778 86.030861 30.942778 c
85.590363 30.942778 85.251961 30.800278 85.015465 30.515278 c
84.77906 30.233477 84.660866 29.907976 84.660866 29.538677 c
84.660866 26.545877 l
83.786263 26.545877 l
83.786263 31.749277 l
h
W
0 0 132 43 rc
82.786263 32.865875 m
87.317566 32.865875 l
87.317566 25.545877 l
82.786263 25.545877 l
h
f
Q
q
88.567764 33.707275 m
89.44236 33.707275 l
89.44236 31.044876 l
89.649567 31.307177 89.835861 31.491777 90.00106 31.598677 c
90.28286 31.783377 90.634262 31.875677 91.055367 31.875677 c
91.809959 31.875677 92.321762 31.611677 92.590561 31.083677 c
92.736366 30.795477 92.809265 30.395477 92.809265 29.883677 c
92.809265 26.545877 l
91.910362 26.545877 l
91.910362 29.825377 l
91.910362 30.207577 91.861862 30.487778 91.764664 30.665876 c
91.605965 30.950876 91.307961 31.093477 90.870667 31.093477 c
90.507965 31.093477 90.179161 30.968777 89.88446 30.719378 c
89.589661 30.469976 89.44236 29.998676 89.44236 29.305477 c
89.44236 26.545877 l
88.567764 26.545877 l
88.567764 33.707275 l
h
W
0 0 132 43 rc
87.567764 34.707275 m
93.809265 34.707275 l
93.809265 25.545877 l
87.567764 25.545877 l
h
f
Q
q
94.533165 31.749277 m
94.533165 28.294977 l
94.533165 28.029377 94.575264 27.812378 94.659462 27.643976 c
94.814964 27.332977 95.104866 27.177477 95.52916 27.177477 c
96.138062 27.177477 96.552666 27.449577 96.772964 27.993776 c
96.892761 28.285276 96.95266 28.685278 96.95266 29.193777 c
96.95266 31.749277 l
97.827263 31.749277 l
97.827263 26.545877 l
97.001266 26.545877 l
97.010963 27.313578 l
96.897659 27.115976 96.75676 26.949177 96.588364 26.813177 c
96.254662 26.541077 95.849861 26.404978 95.373665 26.404978 c
94.631966 26.404978 94.126663 26.652777 93.857864 27.148376 c
93.712166 27.413977 93.639259 27.768677 93.639259 28.212378 c
93.639259 31.749277 l
94.533165 31.749277 l
h
W
0 0 132 43 rc
92.639259 32.749275 m
98.827263 32.749275 l
98.827263 25.404978 l
92.639259 25.404978 l
h
f
Q
q
98.749565 31.749277 m
99.614365 31.749277 l
99.614365 31.010878 l
99.821663 31.266678 100.00946 31.452976 100.17796 31.569576 c
100.46636 31.767178 100.79337 31.865877 101.15936 31.865877 c
101.57436 31.865877 101.90736 31.763878 102.16036 31.559877 c
102.30236 31.443277 102.43237 31.271578 102.54836 31.044876 c
102.74336 31.323378 102.97136 31.529078 103.23436 31.661877 c
103.49636 31.797876 103.79137 31.865877 104.11836 31.865877 c
104.81736 31.865877 105.29436 31.613277 105.54636 31.107977 c
105.68237 30.835978 105.75037 30.469976 105.75037 30.009977 c
105.75037 26.545877 l
104.84236 26.545877 l
104.84236 30.160578 l
104.84236 30.507177 104.75436 30.745277 104.57936 30.874777 c
104.40836 31.004377 104.19736 31.069178 103.94836 31.069178 c
103.60436 31.069178 103.30836 30.954178 103.05936 30.724176 c
102.81236 30.494177 102.68936 30.110376 102.68936 29.572777 c
102.68936 26.545877 l
101.80036 26.545877 l
101.80036 29.941977 l
101.80036 30.294977 101.75836 30.552477 101.67436 30.714478 c
101.54137 30.957376 101.29337 31.078876 100.93137 31.078876 c
100.60036 31.078876 100.29936 30.950876 100.02737 30.695078 c
99.758461 30.439177 99.624062 29.975977 99.624062 29.305477 c
99.624062 26.545877 l
98.749565 26.545877 l
98.749565 31.749277 l
h
W
0 0 132 43 rc
97.749565 32.865875 m
106.75037 32.865875 l
106.75037 25.545877 l
97.749565 25.545877 l
h
f
Q
q
107.26036 27.930576 m
107.26036 27.677977 107.35336 27.478777 107.53736 27.332977 c
107.72237 27.187277 107.94136 27.114376 108.19336 27.114376 c
108.50137 27.114376 108.79936 27.185577 109.08736 27.328176 c
109.57336 27.564577 109.81636 27.951677 109.81636 28.489277 c
109.81636 29.193777 l
109.70937 29.125776 109.57137 29.069077 109.40337 29.023777 c
109.23536 28.978376 109.06937 28.945976 108.90736 28.926577 c
108.37836 28.858578 l
108.06036 28.816477 107.82236 28.750076 107.66436 28.659376 c
107.39536 28.507076 107.26036 28.264177 107.26036 27.930576 c
h
109.37936 29.699078 m
109.58036 29.724977 109.71436 29.809177 109.78236 29.951677 c
109.82137 30.029476 109.84036 30.141176 109.84036 30.286978 c
109.84036 30.584877 109.73336 30.800278 109.52036 30.933077 c
109.30936 31.069178 109.00636 31.137177 108.61137 31.137177 c
108.15437 31.137177 107.83036 31.014076 107.63937 30.767878 c
107.53236 30.631878 107.46336 30.429478 107.43037 30.160578 c
106.61436 30.160578 l
106.63036 30.801876 106.83836 31.247276 107.23637 31.496677 c
107.63837 31.749277 108.10336 31.875677 108.63036 31.875677 c
109.24336 31.875677 109.74036 31.759077 110.12236 31.525877 c
110.50137 31.292578 110.69036 30.929876 110.69036 30.437576 c
110.69036 27.439877 l
110.69036 27.349176 110.70837 27.276278 110.74436 27.221277 c
110.78336 27.166178 110.86237 27.138678 110.98236 27.138678 c
111.02136 27.138678 111.06536 27.140278 111.11337 27.143476 c
111.16236 27.149977 111.21436 27.158077 111.26936 27.167776 c
111.26936 26.521677 l
111.13336 26.482777 111.02937 26.458477 110.95837 26.448776 c
110.88636 26.439077 110.78936 26.434177 110.66637 26.434177 c
110.36536 26.434177 110.14636 26.541077 110.01036 26.754877 c
109.93936 26.868177 109.88937 27.028477 109.86036 27.235777 c
109.68237 27.002577 109.42636 26.800177 109.09236 26.628477 c
108.75836 26.456877 108.39137 26.370977 107.98936 26.370977 c
107.50736 26.370977 107.11137 26.516777 106.80436 26.808277 c
106.49937 27.102978 106.34737 27.470676 106.34737 27.911177 c
106.34737 28.393778 106.49836 28.767878 106.79936 29.033478 c
107.10036 29.299076 107.49536 29.462578 107.98436 29.524178 c
109.37936 29.699078 l
h
W
0 0 132 43 rc
105.34737 32.875675 m
112.26936 32.875675 l
112.26936 25.370977 l
105.34737 25.370977 l
h
f
Q
q
111.68137 31.749277 m
112.51236 31.749277 l
112.51236 31.010878 l
112.75836 31.315277 113.01936 31.533978 113.29436 31.666677 c
113.56937 31.799477 113.87537 31.865877 114.21236 31.865877 c
114.95136 31.865877 115.44936 31.608377 115.70837 31.093477 c
115.85136 30.811678 115.92236 30.408377 115.92236 29.883677 c
115.92236 26.545877 l
115.03336 26.545877 l
115.03336 29.825377 l
115.03336 30.142776 114.98637 30.398678 114.89236 30.592978 c
114.73737 30.916878 114.45536 31.078876 114.04736 31.078876 c
113.84036 31.078876 113.67036 31.057777 113.53736 31.015676 c
113.29736 30.944477 113.08736 30.801876 112.90536 30.588177 c
112.75936 30.416477 112.66436 30.238377 112.61936 30.053677 c
112.57636 29.872377 112.55537 29.611576 112.55537 29.271477 c
112.55537 26.545877 l
111.68137 26.545877 l
111.68137 31.749277 l
h
W
0 0 132 43 rc
110.68137 32.865875 m
116.92236 32.865875 l
116.92236 25.545877 l
110.68137 25.545877 l
h
f
Q
q
118.83736 27.109476 m
119.41637 27.109476 119.81336 27.328176 120.02737 27.765377 c
120.24436 28.205877 120.35236 28.694977 120.35236 29.232677 c
120.35236 29.718477 120.27536 30.113676 120.11936 30.418077 c
119.87336 30.897476 119.44936 31.137177 118.84636 31.137177 c
118.31236 31.137177 117.92336 30.933077 117.68037 30.524977 c
117.43736 30.116877 117.31636 29.624577 117.31636 29.047977 c
117.31636 28.494177 117.43736 28.032578 117.68037 27.663378 c
117.92336 27.294077 118.30936 27.109476 118.83736 27.109476 c
h
118.87136 31.899977 m
119.54137 31.899977 120.10836 31.676477 120.57137 31.229477 c
121.03436 30.782476 121.26637 30.124977 121.26637 29.256977 c
121.26637 28.418077 121.06236 27.724876 120.65437 27.177477 c
120.24536 26.630177 119.61237 26.356478 118.75436 26.356478 c
118.03836 26.356478 117.47036 26.597776 117.04936 27.080378 c
116.62836 27.566177 116.41737 28.217278 116.41737 29.033478 c
116.41737 29.907976 116.63937 30.604378 117.08337 31.122578 c
117.52636 31.640778 118.12236 31.899977 118.87136 31.899977 c
h
W
0 0 132 43 rc
115.41737 32.899979 m
122.26637 32.899979 l
122.26637 25.356478 l
115.41737 25.356478 l
h
f
Q
q
32.230263 21.324278 m
32.230263 16.078876 27.978064 11.826677 22.732662 11.826677 c
17.487263 11.826677 13.235063 16.078876 13.235063 21.324278 c
13.235063 26.569677 17.487263 30.821978 22.732662 30.821978 c
27.978064 30.821978 32.230263 26.569677 32.230263 21.324278 c
h
34.388664 21.324278 m
34.388664 14.886877 29.170162 9.6682768 22.732662 9.6682768 c
16.295162 9.6682768 11.076563 14.886877 11.076563 21.324278 c
11.076563 27.761778 16.295162 32.980347 22.732662 32.980347 c
29.170162 32.980347 34.388664 27.761778 34.388664 21.324278 c
h
17.118063 18.630676 m
20.631163 15.785877 25.655363 15.785877 29.168463 18.630676 c
27.810163 20.308077 l
25.089064 18.104576 21.197462 18.104576 18.476362 20.308077 c
17.118063 18.630676 l
h
18.581062 22.324278 m
18.581062 25.240177 l
20.739563 25.240177 l
20.739563 22.324278 l
18.581062 22.324278 l
h
25.278763 25.240177 m
25.278763 22.324278 l
27.437162 22.324278 l
27.437162 25.240177 l
25.278763 25.240177 l
h
W*
0 0 132 43 rc
10.076563 33.980347 m
35.388664 33.980347 l
35.388664 8.6682768 l
10.076563 8.6682768 l
h
f
ep
end
%%Trailer
%%EOF
