%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.7.4 (Build 20G1120) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.14336 42 l
124.15136 42 130.64336 35.508129 130.64336 27.49996 c
130.64336 1.3260601 l
15.499963 1.3260601 l
7.4918728 1.3260601 1 7.8178601 1 15.82606 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
131.64336 43 l
131.64336 0.32606 l
0 0.32606 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.14336 0 l
123.15136 0 129.64336 6.4918699 129.64336 14.50004 c
129.64336 40.673939 l
14.499963 40.673939 l
6.4918728 40.673939 0 34.18214 0 26.173941 c
0 0 l
h
S
Q
1 1 1 sc
q
64.455162 32.32626 m
64.695465 29.682659 l
66.618164 30.115259 69.437965 30.43576 70.815865 30.57996 c
69.950661 29.794861 68.781059 28.09656 68.781059 25.90156 c
68.781059 22.488859 71.841263 20.550159 75.414162 20.277861 c
76.327362 22.969561 l
73.555664 23.129761 71.344566 24.05896 71.344566 26.414261 c
71.344566 28.32086 72.834663 30.19536 74.564964 30.57996 c
75.446159 30.756161 76.80806 30.756161 77.641167 30.77216 c
77.62516 33.271591 l
76.455566 33.22353 74.564964 33.111359 72.962761 32.983158 c
70.030762 32.72686 67.611465 32.534561 66.105461 32.406361 c
65.801064 32.374359 65.096062 32.342361 64.455162 32.32626 c
h
75.366066 29.426359 m
73.97216 28.84956 l
74.484863 28.11256 74.757263 27.58386 75.189865 26.65456 c
76.615761 27.27936 l
76.327362 27.872259 75.766663 28.833561 75.366066 29.426359 c
h
77.176559 30.19536 m
75.79866 29.57056 l
76.327362 28.84956 76.631866 28.352859 77.096466 27.439659 c
78.506363 28.11256 l
78.185966 28.68936 77.593163 29.618561 77.176559 30.19536 c
h
W
0 0 132 43 rc
63.455162 34.271591 m
79.506363 34.271591 l
79.506363 19.277861 l
63.455162 19.277861 l
h
f
Q
q
84.995262 31.140659 m
85.011261 28.833561 l
85.956566 28.769461 86.917862 28.73736 87.879166 28.73736 c
89.833862 28.75346 91.884666 28.881559 93.550964 29.12196 c
93.550964 31.54126 l
91.852661 31.17276 89.833862 30.99646 87.863167 30.99646 c
86.885864 30.99646 85.924561 31.044559 84.995262 31.140659 c
h
91.371964 33.752251 m
88.600166 33.752251 l
88.664261 33.415791 88.728363 32.887058 88.728363 32.646759 c
88.744362 32.214161 88.760361 31.10866 88.760361 29.82686 c
88.760361 27.40756 88.968666 24.89216 88.968666 23.818661 c
88.968666 22.93746 88.664261 22.520861 87.895164 22.520861 c
87.206261 22.520861 86.645462 22.71316 86.645462 23.27396 c
86.645462 23.786659 87.142166 24.07506 87.895164 24.07506 c
89.593559 24.07506 91.195763 23.017559 93.134361 21.20706 c
94.448166 23.241859 l
93.246567 24.363461 91.275864 25.94956 88.087463 25.94956 c
85.84436 25.94956 84.370361 24.795959 84.370361 23.00156 c
84.370361 21.191059 85.860466 20.229759 88.11956 20.229759 c
90.50676 20.229759 91.468063 21.431459 91.468063 23.32196 c
91.468063 24.76396 91.211761 26.606461 91.211761 29.82686 c
91.211761 31.10866 91.243767 32.18206 91.275864 32.678761 c
91.291862 33.031261 91.32386 33.44783 91.371964 33.752251 c
h
83.601364 33.543961 m
80.925667 33.768269 l
80.90966 33.175461 80.81356 32.438461 80.749466 31.95776 c
80.573166 30.77216 80.124565 27.760059 80.124565 25.30876 c
80.124565 23.129761 80.445061 21.255159 80.781464 20.165661 c
82.976463 20.325859 l
82.960464 20.58226 82.960464 20.870661 82.960464 21.04686 c
82.960464 21.20706 83.00856 21.57556 83.056564 21.799959 c
83.248863 22.72916 83.729561 24.347361 84.210159 25.78936 c
83.040565 26.734659 l
82.83226 26.25396 82.623962 25.94956 82.431763 25.484961 c
82.415764 25.549061 82.415764 25.805361 82.415764 25.85346 c
82.415764 27.34346 82.976463 31.076559 83.168762 31.90976 c
83.232864 32.198158 83.457161 33.191479 83.601364 33.543961 c
h
W
0 0 132 43 rc
79.124565 34.768269 m
95.448166 34.768269 l
95.448166 19.165661 l
79.124565 19.165661 l
h
f
Q
q
95.393463 31.81356 m
95.569664 29.57056 l
96.306664 29.522461 96.963562 29.50646 97.636566 29.50646 c
99.735359 29.50646 102.17036 29.955059 103.43636 30.30756 c
103.37236 32.534561 l
101.99436 32.118061 99.735359 31.70146 97.620461 31.70146 c
97.091766 31.70146 96.130463 31.733459 95.393463 31.81356 c
h
101.93037 34.104729 m
99.27076 34.36108 l
99.222664 33.063259 98.870163 31.509159 98.453667 30.291559 c
97.860863 28.64126 96.43486 25.869459 94.97686 24.042959 c
97.316063 22.857361 l
98.693962 24.812059 100.11987 27.82416 100.84136 30.13126 c
101.30537 31.60536 101.72237 33.22353 101.93037 34.104729 c
h
105.67936 29.089861 m
103.24436 29.089861 l
103.32436 27.45566 103.50037 24.44356 103.50037 23.626459 c
103.50037 22.72916 103.21236 22.168461 102.25037 22.168461 c
101.57836 22.168461 101.12936 22.520861 101.12936 23.03356 c
101.12936 23.49826 101.62637 23.818661 102.41136 23.818661 c
104.86237 23.818661 106.68936 22.04026 107.79436 20.998859 c
109.07636 23.081659 l
107.73036 24.33136 105.43936 25.773359 102.57137 25.773359 c
100.10387 25.773359 98.838165 24.39546 98.838165 22.793261 c
98.838165 20.934759 100.48837 19.94136 102.60336 19.94136 c
105.05436 19.94136 105.85536 21.17506 105.85536 22.77726 c
105.85536 23.59436 105.71136 25.94956 105.67936 26.846861 c
105.66336 27.631861 105.63136 28.400961 105.67936 29.089861 c
h
108.17936 28.00036 m
109.55637 30.051161 l
108.69136 30.643961 106.62437 31.749559 105.47136 32.246159 c
104.22136 30.323561 l
105.34336 29.82686 107.21736 28.75346 108.17936 28.00036 c
h
W
0 0 132 43 rc
93.97686 35.36108 m
110.55637 35.36108 l
110.55637 18.94136 l
93.97686 18.94136 l
h
f
Q
q
119.71436 32.486561 m
117.45536 34.48925 l
117.16737 34.05666 116.59036 33.495899 116.04536 32.967159 c
114.97237 31.941759 112.90536 30.24346 111.62336 29.202061 c
109.92536 27.808161 109.82936 26.846861 111.46336 25.436859 c
112.92136 24.18716 115.22836 22.216459 116.10936 21.28726 c
116.63837 20.758459 117.16737 20.19776 117.67936 19.62096 c
119.95436 21.719761 l
118.35236 23.241859 115.19637 25.69326 114.13837 26.606461 c
113.36936 27.29546 113.33736 27.439659 114.12236 28.11256 c
115.13236 28.993759 117.13536 30.53186 118.14436 31.284861 c
118.57636 31.63736 119.12136 32.053959 119.71436 32.486561 c
h
W
0 0 132 43 rc
108.82936 35.48925 m
120.95436 35.48925 l
120.95436 18.62096 l
108.82936 18.62096 l
h
f
Q
q
47.742863 25.391159 m
51.368862 25.391159 l
49.584965 31.01446 l
47.742863 25.391159 l
h
47.927063 34.281738 m
51.301064 34.281738 l
56.361961 19.99086 l
53.123764 19.99086 l
52.202663 22.92856 l
46.938164 22.92856 l
45.949265 19.99086 l
42.827362 19.99086 l
47.927063 34.281738 l
h
W
0 0 132 43 rc
41.827362 35.281738 m
57.361961 35.281738 l
57.361961 18.99086 l
41.827362 18.99086 l
h
f
Q
q
58.907661 19.99086 2.9668 14.29088 rc
57.907661 35.281738 m
62.874462 35.281738 l
62.874462 18.99086 l
57.907661 18.99086 l
h
f
Q
q
57.147362 31.850861 6.2824001 2.4308801 rc
56.147362 35.281738 m
64.429764 35.281738 l
64.429764 30.850861 l
56.147362 30.850861 l
h
f
Q
q
57.147362 19.98756 6.2824001 2.4309001 rc
56.147362 23.418461 m
64.429764 23.418461 l
64.429764 18.98756 l
56.147362 18.98756 l
h
f
Q
q
46.829964 16.72036 m
46.759464 15.38156 46.759464 10.53976 42.652462 8.44596 c
42.883965 8.2748604 43.135662 8.0433598 43.266563 7.8520598 c
47.433865 10.11696 47.584862 15.13996 47.665363 16.72036 c
46.829964 16.72036 l
h
47.635262 16.518961 m
46.910461 16.448561 l
46.980965 15.52246 47.262764 9.8954601 51.530762 7.8520598 c
51.651562 8.0634604 51.883064 8.3151598 52.104565 8.4862604 c
47.957363 10.38876 47.665363 15.73386 47.635262 16.518961 c
h
W
0 0 132 43 rc
41.652462 17.72036 m
53.104565 17.72036 l
53.104565 6.8520598 l
41.652462 6.8520598 l
h
f
Q
q
55.879364 10.86186 m
55.879364 10.27806 l
58.929363 10.27806 l
58.929363 10.86186 l
55.879364 10.86186 l
h
55.849163 12.38186 m
55.849163 11.78796 l
58.566963 11.78796 l
58.566963 9.2915602 l
55.849163 9.2915602 l
55.849163 8.7076597 l
59.281662 8.7076597 l
59.281662 12.38186 l
55.849163 12.38186 l
h
55.516964 12.38186 m
55.516964 8.1943598 l
56.211563 8.1943598 l
56.211563 12.38186 l
55.516964 12.38186 l
h
53.664764 15.17016 m
53.664764 14.61646 l
56.463161 14.61646 l
56.463161 15.17016 l
53.664764 15.17016 l
h
58.305264 15.17016 m
58.305264 14.61646 l
61.153961 14.61646 l
61.153961 15.17016 l
58.305264 15.17016 l
h
60.841965 16.59956 m
60.841965 8.7680597 l
60.841965 8.5969601 60.781563 8.5365601 60.600365 8.5365601 c
60.419163 8.5265598 59.805164 8.5164604 59.191063 8.5466604 c
59.301865 8.3352604 59.422665 7.9829602 59.452862 7.7715602 c
60.298363 7.7715602 60.841965 7.7816601 61.164062 7.9024601 c
61.486164 8.0332603 61.596863 8.2849598 61.596863 8.7680597 c
61.596863 16.59956 l
60.841965 16.59956 l
h
53.725163 16.59956 m
53.725163 16.015659 l
56.231663 16.015659 l
56.231663 13.72066 l
53.725163 13.72066 l
53.725163 13.13676 l
56.946362 13.13676 l
56.946362 16.59956 l
53.725163 16.59956 l
h
61.214363 16.59956 m
57.852264 16.59956 l
57.852264 13.12676 l
61.214363 13.12676 l
61.214363 13.70046 l
58.577065 13.70046 l
58.577065 16.015659 l
61.214363 16.015659 l
61.214363 16.59956 l
h
53.292362 16.59956 m
53.292362 7.7614598 l
54.037262 7.7614598 l
54.037262 16.59956 l
53.292362 16.59956 l
h
W
0 0 132 43 rc
52.292362 17.59956 m
62.596863 17.59956 l
62.596863 6.7614598 l
52.292362 6.7614598 l
h
f
Q
q
66.720566 16.388161 m
65.784363 16.48876 l
65.784363 15.71376 65.653564 14.80776 65.462265 14.00246 c
65.19046 12.77446 64.385162 10.08676 63.237663 8.5466604 c
64.063065 8.2245598 l
65.200562 10.05656 65.91526 12.56306 66.257462 13.98236 c
66.39846 14.60646 66.529266 15.43186 66.599762 15.79426 c
66.64006 15.98546 66.68026 16.206961 66.720566 16.388161 c
h
70.183266 15.23056 m
69.448463 14.89836 l
70.153061 14.06286 70.948364 12.31136 71.240265 11.28466 c
72.02536 11.65706 l
71.683167 12.58316 70.807365 14.41516 70.183266 15.23056 c
h
63.096764 14.18366 m
63.177261 13.30796 l
63.438965 13.34816 63.851662 13.39856 64.08326 13.42866 c
64.697266 13.48906 66.589661 13.72066 67.26416 13.72066 c
67.908363 13.72066 68.331161 13.54946 68.331161 12.62346 c
68.331161 11.53626 68.170059 10.22766 67.847961 9.5431604 c
67.64666 9.1103601 67.344666 9.0298595 66.97216 9.0298595 c
66.690361 9.0298595 66.15686 9.1002598 65.734062 9.2311602 c
65.874962 8.3956604 l
66.187065 8.3151598 66.670265 8.2446604 67.052765 8.2446604 c
67.707062 8.2446604 68.210365 8.41576 68.522362 9.0902596 c
68.94516 9.9256601 69.106262 11.52626 69.106262 12.72406 c
69.106262 14.08296 68.371361 14.42526 67.475464 14.42526 c
66.790962 14.42526 64.747566 14.20376 63.992664 14.18366 c
63.670563 14.17356 63.408764 14.16356 63.096764 14.18366 c
h
70.29406 16.690161 m
69.750465 16.458561 l
70.032265 16.076059 70.374565 15.47216 70.575867 15.05946 c
71.119461 15.30096 l
70.908066 15.71376 70.545662 16.327761 70.29406 16.690161 c
h
71.40126 17.09276 m
70.86776 16.861259 l
71.15966 16.48876 71.491859 15.91506 71.703262 15.47216 c
72.256866 15.71376 l
72.055565 16.086161 71.673065 16.72036 71.40126 17.09276 c
h
W
0 0 132 43 rc
62.096764 18.09276 m
73.256866 18.09276 l
73.256866 7.2245598 l
62.096764 7.2245598 l
h
f
Q
q
76.112267 15.58286 m
76.112267 14.88826 l
82.091461 14.88826 l
82.091461 15.58286 l
76.112267 15.58286 l
h
77.521461 17.022261 m
77.521461 13.56966 l
78.246262 13.56966 l
78.246262 17.022261 l
77.521461 17.022261 l
h
80.037964 17.022261 m
80.037964 13.56966 l
80.772865 13.56966 l
80.772865 17.022261 l
80.037964 17.022261 l
h
76.565163 13.12676 m
76.565163 7.7816601 l
77.249664 7.7816601 l
77.249664 12.45226 l
81.004364 12.45226 l
81.004364 7.8319602 l
81.729164 7.8319602 l
81.729164 13.12676 l
76.565163 13.12676 l
h
76.93766 11.06316 m
76.93766 10.39886 l
81.346565 10.39886 l
81.346565 11.06316 l
76.93766 11.06316 l
h
76.957764 8.9794598 m
76.957764 8.3050604 l
81.356667 8.3050604 l
81.356667 8.9794598 l
76.957764 8.9794598 l
h
78.769661 12.82476 m
78.769661 8.5063601 l
79.464264 8.5063601 l
79.464264 12.82476 l
78.769661 12.82476 l
h
72.790359 11.67716 m
72.99176 10.94236 l
73.837265 11.21416 74.924461 11.56646 75.961266 11.91876 c
75.860565 12.60326 l
74.733162 12.25096 73.56546 11.88856 72.790359 11.67716 c
h
72.931366 14.99906 m
72.931366 14.29436 l
75.931061 14.29436 l
75.931061 14.99906 l
72.931366 14.99906 l
h
74.149361 17.022261 m
74.149361 8.7177601 l
74.149361 8.5667601 74.109062 8.5265598 73.978165 8.5265598 c
73.85746 8.5265598 73.474861 8.5265598 73.03196 8.5365601 c
73.13266 8.32516 73.223267 8.0131598 73.243362 7.8319602 c
73.887665 7.8319602 74.280167 7.8520598 74.511665 7.9728599 c
74.763367 8.0936604 74.853966 8.29496 74.853966 8.7076597 c
74.853966 17.022261 l
74.149361 17.022261 l
h
W
0 0 132 43 rc
71.790359 18.022261 m
83.091461 18.022261 l
83.091461 6.7816601 l
71.790359 6.7816601 l
h
f
Q
q
84.82946 15.59296 m
83.853065 15.61306 l
83.91346 15.38156 83.91346 14.94866 83.91346 14.71716 c
83.91346 14.13336 83.933563 12.90526 84.024162 12.03956 c
84.306061 9.4324598 85.21196 8.4862604 86.168266 8.4862604 c
86.85276 8.4862604 87.456764 9.0700598 88.070763 10.77126 c
87.436562 11.48596 l
87.174866 10.47936 86.701759 9.4425602 86.188362 9.4425602 c
85.463661 9.4425602 84.980461 10.55986 84.809364 12.24086 c
84.738861 13.06636 84.728867 13.99246 84.738861 14.61646 c
84.748962 14.87826 84.77916 15.36136 84.82946 15.59296 c
h
90.063866 15.32116 m
89.288765 15.04936 l
90.245064 13.87166 90.859062 11.79796 91.030167 9.9860601 c
91.845566 10.30826 l
91.694565 12.00936 90.969765 14.15346 90.063866 15.32116 c
h
W
0 0 132 43 rc
82.853065 16.61306 m
92.845566 16.61306 l
92.845566 7.4862599 l
82.853065 7.4862599 l
h
f
Q
q
97.10006 16.48876 m
96.143761 16.569361 l
96.163864 16.35796 96.143761 16.015659 96.103462 15.73386 c
96.033066 15.21036 95.771362 13.94206 95.529762 13.01596 c
95.147263 11.59666 94.442566 9.5532598 93.838661 8.5063601 c
94.714363 8.2144604 l
95.247864 9.3116598 95.922363 11.39536 96.28466 12.82476 c
96.566566 13.83136 96.777962 14.96886 96.928963 15.69356 c
96.969162 15.88486 97.039665 16.267361 97.10006 16.48876 c
h
94.875465 14.80776 m
94.50296 14.80776 94.140663 14.82786 93.667564 14.88826 c
93.68766 14.10316 l
94.060066 14.07296 94.412361 14.06286 94.855263 14.06286 c
95.942467 14.06286 97.462463 14.23396 98.710663 14.51586 c
98.710663 15.30096 l
97.462463 14.98896 95.982765 14.80776 94.875465 14.80776 c
h
98.056366 13.42866 m
98.056366 12.67376 l
98.670364 12.74426 99.294464 12.78446 99.918564 12.78446 c
100.51236 12.78446 101.09636 12.72406 101.61936 12.66366 c
101.64037 13.42866 l
101.09636 13.48906 100.48236 13.50926 99.89846 13.50926 c
99.254166 13.50926 98.579765 13.47906 98.056366 13.42866 c
h
98.25766 10.98266 m
97.512764 11.05306 l
97.422165 10.63036 97.361763 10.24786 97.361763 9.8652601 c
97.361763 8.8687601 98.227463 8.38556 99.807861 8.38556 c
100.54237 8.38556 101.21736 8.44596 101.76036 8.5265598 c
101.79036 9.3317604 l
101.16637 9.2110596 100.48236 9.1405602 99.817863 9.1405602 c
98.388565 9.1405602 98.11676 9.6035604 98.11676 10.07666 c
98.11676 10.33846 98.177162 10.65046 98.25766 10.98266 c
h
W
0 0 132 43 rc
92.667564 17.569361 m
102.79036 17.569361 l
102.79036 7.2144599 l
92.667564 7.2144599 l
h
f
Q
q
33.230263 21.32416 m
33.230263 16.07876 28.978064 11.82656 23.732662 11.82656 c
18.487263 11.82656 14.235063 16.07876 14.235063 21.32416 c
14.235063 26.569559 18.487263 30.82176 23.732662 30.82176 c
28.978064 30.82176 33.230263 26.569559 33.230263 21.32416 c
h
35.388664 21.32416 m
35.388664 14.88666 30.170162 9.6681604 23.732662 9.6681604 c
17.295162 9.6681604 12.076563 14.88666 12.076563 21.32416 c
12.076563 27.76166 17.295162 32.980259 23.732662 32.980259 c
30.170162 32.980259 35.388664 27.76166 35.388664 21.32416 c
h
18.118063 18.63056 m
21.631163 15.78576 26.655363 15.78576 30.168463 18.63056 c
28.810163 20.307961 l
26.089064 18.10446 22.197462 18.10446 19.476362 20.307961 c
18.118063 18.63056 l
h
19.581062 22.32416 m
19.581062 25.240061 l
21.739563 25.240061 l
21.739563 22.32416 l
19.581062 22.32416 l
h
26.278763 25.240061 m
26.278763 22.32416 l
28.437162 22.32416 l
28.437162 25.240061 l
26.278763 25.240061 l
h
W*
0 0 132 43 rc
11.076563 33.980259 m
36.388664 33.980259 l
36.388664 8.6681604 l
11.076563 8.6681604 l
h
f
ep
end
%%Trailer
%%EOF
